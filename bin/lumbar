#!/usr/bin/env node

var fs = require('fs'),
    lumbar = require('../lib/lumbar'),
    dirname = require('path').dirname,
    growl = require('growl');

var args = process.argv.slice(2);

var LONG_USAGE="lumbar help\n"+
"        Print this long help message.\n"+
"lumbar build [--package name] [--config file] [--minimize] [--use path [--with options]] lumbarFile outputDir\n"+
"        Build out the package(s).\n"+
"lumbar watch [--package name] [--config file] [--minimize] [--use path [--with options]] lumbarFile outputDir\n"+
"        Start watching the files for changes and rebuild as necessary.\n"+
"\n"+
"--package:    represents the name of a corresponding package listed\n"+
"              under 'packages' in lumbarFile.\n"+
"\n"+
"--minimize:   to shrink the resultant file.\n"+
"\n"+
"--config:     is the name and path to the lumbar config file, if\n"+
"              not given then lumbar.json is assumed.\n"+
"\n"+
"--use:        path to your plugin to load\n"+
"\n"+
"    --with:   an optional json config object to pass to your plugin.\n"+
"\n"+
"    --name:   an optional name to assign to your plugin.\n"+
"\n"+
"lumbarFile:   is the name and path to the lumbar config file, if\n"+
"              not given then lumbar.json is assumed.\n"+
"\n"+
"outputDir:    Required. Designates where the files will be placed.\n"+
"\n";

var configFile;
var packageName;
var minimize = false;
var build = true; // build by default.
var watch = false;

var lumbarFile;
var outputDir;
/**
 * Import paths.
 */
var plugins = [];
var files = [];

var arg;
while (args.length) {
  arg = args.shift();
  switch (arg) {
    case '-h':
    case '--help':
      console.error(LONG_USAGE);
      process.exit(1);
      break;
    case '-c':
    case '--config':
      configFile = args.shift();
      if (!configFile) throw new Error('--config <file> required');
      break;
    case '-p':
    case '--package':
      packageName = args.shift();
      if (!packageName) throw new Error('--package <name> required');
      break;
    case '-m':
    case '--minimize':
      minimize = true;
      break;
    case '-b':
    case '--build':
    case 'build':
      build = true;
      watch = false;
      break;
    case '-w':
    case '--watch':
    case 'watch':
      watch = true;
      build = false;
      break;
    case '-u':
    case '--use':
      var options;
      var path = args.shift();
      if (!path) throw new Error('--use <path> required');

      var pluginName;
      if ('--name' == args[0] || '--with' == args[0]) {
        function extractWith() {
          args.shift();
          options = args.shift();
          if (!options) throw new Error('--with <options> required');
          options = eval('(' + options + ')');
        }

        function extractName() {
          args.shift();
          pluginName = args.shift();
        }

        if ('--name' == args[0]) {
          extractName();
          if ('--with' == args[0]) { extractWith(); }
        }
        else if ('--with' == args[0]) {
          extractWith();
          if ('--name' == args[0]) { extractName(); }
        }
      }

      pluginName = pluginName || "PlugIn_" + plugins.length;
      plugins.push({ path: path, options: options, name: pluginName });

      break;
    default:
      files.push(arg);
  }
}

if (build || watch) {
  switch (files.length) {
    case 2:
      lumbarFile = files[0];
      outputDir = files[1];
      break;
    case 1:
      outputDir = files[0];
      lumbarFile = "lumbar.json";
      break;
    case 0:
      console.error(LONG_USAGE);
      process.exit(1);
      return true;
  }
} else {
  console.error(LONG_USAGE);
  process.exit(1);
}

plugins = plugins.map(function(plugin) {
  var path = plugin.path;
  var name = plugin.name;
  var options = plugin.options;
  try {
    var fn = require(path);
  } catch (err) {
    // Load from the current directory if not found in the normal lookup paths
    fn = require(process.cwd() + '/node_modules/' + path);
  }

  lumbar.plugin(name, 'function' != typeof fn ? fn : fn(options));
  return name;
});

var options = {
  packageConfigFile: configFile,
  minimize: minimize,
  outdir: outputDir,
  plugins: plugins
};

// invoke init() from ../lib/lumbar.js.
var arise = lumbar.init(lumbarFile, options),
    // is worker going to point to watch or build func?
    worker = watch ? arise.watch : arise.build,
    lastMessage;

arise.on('output', function(status) {
  if (status.watch) {
    console.log('\t\033[90mwatching\033[0m ' + status.fileName);
  } else {
    console.log('\t\033[90mcompiled\033[0m ' + status.fileName);
  }
});
arise.on('error', function(err) {
  var message = err.stack || err.message;
  if (lastMessage !== message) {
    lastMessage = message;

    console.error(message);
    growl(err.message, { title: 'Lumbar error' });
  }
});

// First figure out what our output looks like
fs.stat(options.outdir, function(err, stat) {
    if (err) {
        throw err;
    }

    if (!stat.isDirectory()) {
        throw new Error("Output must be a directory");
    }

    // execute either watch() or build() and pass lumbar as the context.
    worker.call(arise, packageName, function(err, status) {
        if (err) {
            throw err;
        }
    });
});
